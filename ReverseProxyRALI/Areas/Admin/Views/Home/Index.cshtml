@model FGate.Areas.Admin.Models.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
}

<section>
    <div class="row">
        <div class="col-lg-3 col-md-6 mb-4">
            <div class="card">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            <div class="text-primary text-uppercase fw-bold small mb-1">Solicitudes (24h)</div>
                            <div class="h5 mb-0 fw-bold text-body">@Model.TotalRequests24h.ToString("N0")</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-chart-line fa-2x text-primary-light"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6 mb-4">
            <div class="card">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            <div class="text-success text-uppercase fw-bold small mb-1">Grupos de Endpoints</div>
                            <div class="h5 mb-0 fw-bold text-body">@Model.EndpointGroupCount</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-sitemap fa-2x text-success-light"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6 mb-4">
            <div class="card">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            <div class="text-info text-uppercase fw-bold small mb-1">API Tokens</div>
                            <div class="h5 mb-0 fw-bold text-body">@Model.ApiTokenCount</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-key fa-2x text-info-light"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6 mb-4">
            <div class="card">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            <div class="text-danger text-uppercase fw-bold small mb-1">IPs Bloqueadas</div>
                            <div class="h5 mb-0 fw-bold text-body">@Model.BlockedIpCount</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-ban fa-2x text-danger-light"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-body-tertiary">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0"><i class="far fa-clock me-2"></i>Resumen de Tráfico de las Últimas 24 Horas</h5>
                        <form asp-action="RefreshCache" method="post" class="m-0">
                            @Html.AntiForgeryToken()
                            <button type="submit" class="btn btn-primary btn-sm" data-mdb-ripple-init>
                                <i class="fas fa-sync-alt me-2"></i> Refrescar Caché
                            </button>
                        </form>
                    </div>
                </div>
                <div class="card-body">
                    <div id="mainTrafficChart" style="width: 100%; height: 400px;"></div>
                </div>
            </div>
        </div>
    </div>
</section>


@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const chartDom = document.getElementById('mainTrafficChart');
            if (!chartDom) return;

            // ECharts Theme Definitions
            const lightTheme = {
                backgroundColor: 'transparent',
                textStyle: {
                    color: '#495057'
                },
                axisLine: {
                    lineStyle: { color: '#adb5bd' }
                },
                splitLine: {
                    lineStyle: { color: '#dee2e6' }
                }
            };

            const darkTheme = {
                backgroundColor: 'transparent',
                textStyle: {
                    color: '#dee4e9'
                },
                axisLine: {
                    lineStyle: { color: '#6c757d' }
                },
                splitLine: {
                    lineStyle: { color: '#495057' }
                }
            };

            let myChart;
            const chartData = JSON.parse('@Html.Raw(Model.MainTrafficChartJson)');

            function initChart(theme) {
                if (myChart) {
                    myChart.dispose();
                }
                
                const currentTheme = theme === 'dark' ? darkTheme : lightTheme;
                myChart = echarts.init(chartDom, null, { renderer: 'svg' });

                const defaultOptions = {
                    grid: { left: '3%', right: '4%', bottom: '3%', containLabel: true },
                    tooltip: {
                        trigger: 'axis'
                    }
                };
                
                const finalOptions = { ...defaultOptions, ...chartData, ...currentTheme };
                myChart.setOption(finalOptions);
            }

            // Initial chart render
            const initialTheme = localStorage.getItem('theme') || 'light';
            initChart(initialTheme);

            // Listener for theme changes from the layout
            const htmlElement = document.documentElement;
            const observer = new MutationObserver(mutations => {
                mutations.forEach(mutation => {
                    if (mutation.type === 'attributes' && mutation.attributeName === 'data-mdb-theme') {
                        const newTheme = htmlElement.getAttribute('data-mdb-theme') || 'light';
                        initChart(newTheme);
                    }
                });
            });
            observer.observe(htmlElement, { attributes: true });

            // Resize listener
            window.addEventListener('resize', () => myChart.resize());
        });
    </script>
}
